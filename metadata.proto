syntax = "proto3";
package tnel.birdsong;

message Session {

    // MESSAGES:
    
    // Neural Probe
    message NeuralProbe {
        string acquisition_signal = 1;               // string: e.g. neural
        string manufacturer = 2;                     // string: neuronexus, neuropixel, masmanidis, inhouse
        string model = 3;                            // string: buzsaki32, neuropixels_1
        string serial_number = 4;                    // string: U656
        int32  num_channels = 5;                     // int32: 16, 32, 64, 384
        float  tip_depth_microns = 6;                // float: depth of the tip of the probe
        string implant_coordinates_microns = 7;      // string: A/P, M/L, D/V
        string hemisphere = 8;                       // string: left, right
        repeated string brain_nucleus= 9;            // repeated string: [hvc], [hvc,ra], area_X
        string headstage = 10;                       // string: e.g. H32
        string channel_group = 11;                   // string: port_0, imec_0
        string channels = 12;                        // string: e.g. 1-64,
        repeated string details = 13;                // repeated string: Any additional info
    }

    // Sensor (Message)
    message Sensor {
        string acquisition_signal = 1;               // string: audio, audio, pressure, sync, emg, video
        string manufacturer = 2;                     // string: miniDSP, earthworks, fujikura, inhouse, inhouse
        string model = 3;                            // string: uma8, m30, fhm-20, uma8_sync, emg_amp_inhouse
        string serial_number = 4;                    // string: '', '', '', uma_syn_001, emg_amp_001
        string signal_name = 5;                      // string: mic_0, pressure, syn_uma8, emg, syn_stim, stim, â€¦
        string headstage = 6;                        // string: '', intan32, ", intan32
        string channel_group = 7;                    // string: AIN, port_0, DIN, port_1
        string channels = 8;                         // string: [0], [aux_0], [0], [aux_0, aux_1]
        string locations = 9;                        // string: left, right, tracheal rings, muscles...
        repeated string details = 10;                // repeated string: Any additional info
    }

    // // Stimulus presented to subject during recordings (Message)
    message Stimulus {
        string stimulus_signal = 1;     //  string: female, video, song_replay, neural_stim
        string manufacturer = 2;        //  string: '', inhouse, inhouse, neuronexus
        string model = 3;               //   string: '', '', '3 females in cage, buzsaki32
        string serial_number = 4;
        string signal_name = 5;
        string channel_gropup = 6;      //  string: AIN, port_0, DIN, port_1
        string channels = 7;            //  string: [0], [aux_0], [0], [aux_0, aux_1]
        repeated string details = 8;    //  repeated string: Any additional info
    }
    
    // // ACQUISITION SYSTEM that may have multiple sensors / stimuli attached (Message)
    message Acquisition {
        string acquisition_hardware = 1;     //  string: openephys, intan, spikeglx, uma8, raspi, any custom amp
        string acquisition_software = 2;     //  string: openephys, openephys++, spikeglx, alsa, vlc
        
        repeated NeuralProbe neuralprobes = 13;
        repeated Sensor sensors = 14;
        repeated Stimulus stimuli = 15;
    }
    
    
    // MAIN MESSAGE
    // Bird Type
    enum BirdType {
        UNKNOWN_BIRDTYPE = 0;
        ZEBRA = 1;
        STARLING = 2;
        BENGALESE = 3;
        }

    // Bird Sex
    enum BirdSex {
        UNKNOWN_BIRDSEX = 0;
        MALE = 1;
        FEMALE = 2;
        }

    // Condition
    enum Condition {
        UNKNOWN_CONDITION = 0;
        HABITUATION = 1;
        CHRONIC = 2;
        ACUTE = 3;
        }

    BirdType bird_type = 1;         // UNKNOWN_BIRDTYPE(0), ZEBRA(1), STARLING(2), BENGALESE(3)
    BirdSex bird_sex = 2;           // UNKNOWN_BIRDSEX(0), MALE(1), FEMALE(2)
    string bird_uid = 3;            // string: e.g. z_m10g8_20
    string date = 4;                // string: e.g. 2021-03-10
    string time = 5;                // string: e.g. 14:42:01.754603 (microseconds precision)
    float weight_grams = 6;         // float
    bool testosterone = 7;          // bool: True / False
    string testosterone_date = 8;   // string: e.g. 2021-03-10
    bool dummy_weight = 9;          // bool: True / False
    float dummy_weight_grams = 10;          // bool: True / False
    string dummy_weight_date = 11;   // string: e.g. 2021-03-10
    bool dummy_tether = 12;          // bool: True / False
    string dummy_tether_date = 13;   // string: e.g. 2021-03-10
    Condition condition = 14;       // UNKNOWN_CONDITION(0), HABITUATION(1), CHRONIC(2), ACUTE(3)
    string sess_uid = 15;            // string: e.g. habituation_birdID_date_time
    string box = 16;                // string: e.g. passaro1, cuervecito3, shoox
    repeated string details = 17;   // repeated string: (Any additional info)
    
    repeated Acquisition acquisitions = 18;
}


// Compile message:
// protoc --proto_path=/home/jovyan/pablo_tostado/bird_song/protobuff_serialization --python_out=/home/jovyan/pablo_tostado/bird_song/protobuff_serialization/ /home/jovyan/pablo_tostado/bird_song/protobuff_serialization/metadata.proto


//-> bird
  //  -> date (session)
    //    -> exp_type (habituation / chronic)
        

//-> bird
  //  -> software_type (habituation / open_ephys(neuronexus) / spikeGLX (neuropixels))
    //    -> session (date+time = 12_12_2020-7_00_15)
      //     * .protoc file
        //   * .json